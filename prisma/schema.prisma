// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String   @id @default(cuid())
  firstName       String
  lastName        String?
  email           String   @unique
  profileImageURL String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  followers Follows[] @relation("follower")
  following Follows[] @relation("following")
  tweets       Tweet[]
  Likes        Likes[]
  chatRooms    ChatRoomMember[]
  groupMembers GroupMember[]
  groupPosts   GroupPost[]
  comments     Comment[]
}

model Tweet {
  id        String   @id @default(cuid())
  content   String
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String
  group     Group?   @relation(fields: [groupId], references: [id])
  groupId   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  Likes     Likes[]
  comments  Comment[]
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String
  tweet     Tweet    @relation(fields: [tweetId], references: [id])
  tweetId   String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model Follows {
  follower   User   @relation("follower", fields: [followerId], references: [id])
  followerId String

  following   User   @relation("following", fields: [followingId], references: [id])
  followingId String

  @@id([followerId, followingId])
}

model Likes {
  id       String @id @default(cuid())
  tweet    Tweet  @relation(fields: [tweetId], references: [id])
  tweetId  String
  user     User   @relation(fields: [userId], references: [id])
  userId   String
}

model ChatRoom {
  id        String   @id @default(cuid())
  name      String
  isAnonymous Boolean
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  members   ChatRoomMember[]
  audioCalls AudioCall[]
}

model ChatRoomMember {
  id        String   @id @default(cuid())
  chatRoom  ChatRoom @relation(fields: [chatRoomId], references: [id])
  chatRoomId String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  anonymousId String? @default(cuid())
}

model AudioCall {
  id        String   @id @default(cuid())
  chatRoom  ChatRoom @relation(fields: [chatRoomId], references: [id])
  chatRoomId String
  recordingURL String?
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model Group {
  id        String   @id @default(cuid())
  name      String
  isAnonymous Boolean
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  members   GroupMember[]
  posts     GroupPost[]
  tweets    Tweet[]
}

model GroupMember {
  id        String   @id @default(cuid())
  group     Group    @relation(fields: [groupId], references: [id])
  groupId   String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  anonymousId String? @default(cuid())
}

model GroupPost {
  id        String   @id @default(cuid())
  content   String
  imageURL  String?
  videoURL  String?
  linkURL   String?
  group     Group    @relation(fields: [groupId], references: [id])
  groupId   String
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}
